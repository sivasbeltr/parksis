# Generated by Django 5.2 on 2025-04-24 11:23

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('ortak', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='DonatiTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Donatı tipi giriniz.', max_length=50, unique=True, verbose_name='Donatı Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Donatı tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Donatı Tipi',
                'verbose_name_plural': 'Donatı Tipleri',
                'db_table': '"parkbahce"."donati_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='ElektrikHatTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Elektrik hat tipi giriniz.', max_length=50, unique=True, verbose_name='Elektrik Hat Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Elektrik hat tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Elektrik Hat Tipi',
                'verbose_name_plural': 'Elektrik Hat Tipleri',
                'db_table': '"parkbahce"."elektrik_hat_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='ElektrikKabloTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Elektrik kablo tipi giriniz.', max_length=50, unique=True, verbose_name='Elektrik Kablo Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Elektrik kablo tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Elektrik Kablo Tipi',
                'verbose_name_plural': 'Elektrik Kablo Tipleri',
                'db_table': '"parkbahce"."elektrik_kablo_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='HabitatTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Habitat tipi giriniz.', max_length=50, unique=True, verbose_name='Habitat Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Habitat tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Habitat Tipi',
                'verbose_name_plural': 'Habitat Tipleri',
                'db_table': '"parkbahce"."habitat_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='KanalBoruTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Kanalizasyon boru tipi giriniz.', max_length=50, unique=True, verbose_name='Kanalizasyon Boru Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Kanalizasyon boru tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Kanalizasyon Boru Tipi',
                'verbose_name_plural': 'Kanalizasyon Boru Tipleri',
                'db_table': '"parkbahce"."kanalizasyon_boru_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='KaplamaTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Kaplama tipi giriniz.', max_length=50, unique=True, verbose_name='Kaplama Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Kaplama tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Kaplama Tipi',
                'verbose_name_plural': 'Kaplama Tipleri',
                'db_table': '"parkbahce"."kaplama_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='OyunGrupTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Oyun grubu tipi giriniz.', max_length=50, unique=True, verbose_name='Oyun Grubu Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Oyun grubu tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Oyun Grubu Tipi',
                'verbose_name_plural': 'Oyun Grubu Tipleri',
                'db_table': '"parkbahce"."oyun_grubu_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='ParkBinaKullanimTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Bina kullanım tipi giriniz.', max_length=50, unique=True, verbose_name='Bina Kullanım Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Bina kullanım tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Bina Kullanım Tipi',
                'verbose_name_plural': 'Bina Kullanım Tipleri',
                'db_table': '"parkbahce"."bina_kullanim_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='ParkTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Park tipi giriniz.', max_length=50, unique=True, verbose_name='Park Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Park tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Park Tipi',
                'verbose_name_plural': 'Park Tipleri',
                'db_table': '"parkbahce"."park_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='SporAlanTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Spor alanı tipi giriniz.', max_length=50, unique=True, verbose_name='Spor Alanı Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Spor alanı tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Spor Alanı Tipi',
                'verbose_name_plural': 'Spor Alanı Tipleri',
                'db_table': '"parkbahce"."spor_alan_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='SulamaBoruTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Boru tipi giriniz.', max_length=50, unique=True, verbose_name='Boru Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Boru tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Sulama Boru Tipi',
                'verbose_name_plural': 'Sulama Boru Tipleri',
                'db_table': '"parkbahce"."sulama_boru_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='SulamaKaynak',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Sulama kaynağı giriniz.', max_length=50, unique=True, verbose_name='Sulama Kaynağı')),
                ('aciklama', models.TextField(blank=True, help_text='Sulama kaynağı hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Sulama Kaynağı',
                'verbose_name_plural': 'Sulama Kaynakları',
                'db_table': '"parkbahce"."sulama_kaynaklari"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='SulamaNoktaTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Sulama noktası tipi giriniz.', max_length=50, unique=True, verbose_name='Sulama Noktası Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Sulama noktası tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Sulama Noktası Tipi',
                'verbose_name_plural': 'Sulama Noktası Tipleri',
                'db_table': '"parkbahce"."sulama_noktasi_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='SulamaTip',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ad', models.CharField(help_text='Sulama tipi giriniz.', max_length=50, unique=True, verbose_name='Sulama Tipi')),
                ('aciklama', models.TextField(blank=True, help_text='Sulama tipi hakkında açıklama giriniz.', null=True, verbose_name='Açıklama')),
            ],
            options={
                'verbose_name': 'Sulama Tipi',
                'verbose_name_plural': 'Sulama Tipleri',
                'db_table': '"parkbahce"."sulama_tipleri"',
                'ordering': ['ad'],
            },
        ),
        migrations.CreateModel(
            name='Park',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ad', models.CharField(help_text='Park adı giriniz.', max_length=50, unique=True, verbose_name='Park Adı')),
                ('meclis_tarih', models.DateField(blank=True, help_text='Parkın meclis karar tarihini giriniz.', null=True, verbose_name='Meclis Tarihi')),
                ('meclis_no', models.CharField(blank=True, help_text='Parkın meclis karar numarasını giriniz.', max_length=50, null=True, verbose_name='Meclis No')),
                ('yapim_tarihi', models.DateField(blank=True, help_text='Parkın yapım tarihini giriniz.', null=True, verbose_name='Yapım Tarihi')),
                ('yapan_firma', models.CharField(blank=True, help_text='Parkı yapan firmanın adını giriniz.', max_length=100, null=True, verbose_name='Yapan Firma')),
                ('ekap_no', models.CharField(blank=True, help_text='Parkın ekap numarasını giriniz.', max_length=50, null=True, verbose_name='Ekap No')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='Park sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('alan', models.FloatField(blank=True, default=0, help_text='Park alanını giriniz.', null=True, verbose_name='Alan')),
                ('cevre', models.FloatField(blank=True, default=0, help_text='Park çevresini giriniz.', null=True, verbose_name='Çevre')),
                ('extra_data', models.JSONField(blank=True, help_text='Park ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('ada', models.ForeignKey(blank=True, help_text='Parkın bulunduğu ada.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parklar', to='ortak.ada', verbose_name='Ada')),
                ('mahalle', models.ForeignKey(help_text='Parkın bulunduğu mahalle.', on_delete=django.db.models.deletion.CASCADE, related_name='parklar', to='ortak.mahalle', verbose_name='Mahalle')),
                ('park_tipi', models.ForeignKey(blank=True, help_text='Park tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parklar', to='parkbahce.parktip', verbose_name='Park Tipi')),
                ('sulama_kaynagi', models.ForeignKey(blank=True, help_text='Sulama kaynağı seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parklar', to='parkbahce.sulamakaynak', verbose_name='Sulama Kaynağı')),
                ('sulama_tipi', models.ForeignKey(blank=True, help_text='Sulama tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parklar', to='parkbahce.sulamatip', verbose_name='Sulama Tipi')),
            ],
            options={
                'verbose_name': 'Park',
                'verbose_name_plural': 'Parklar',
                'db_table': '"parkbahce"."parklar"',
                'ordering': ['mahalle__ilce__il__ad', 'mahalle__ilce__ad', 'mahalle__ad', 'ad'],
            },
        ),
        migrations.CreateModel(
            name='OyunAlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='Oyun alanı sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('alan', models.FloatField(blank=True, default=0, help_text='Oyun alanı alanını giriniz.', null=True, verbose_name='Alan')),
                ('cevre', models.FloatField(blank=True, default=0, help_text='Oyun alanı çevresini giriniz.', null=True, verbose_name='Çevre')),
                ('extra_data', models.JSONField(blank=True, help_text='Oyun alanı ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('oyun_alan_kaplama_tipi', models.ForeignKey(blank=True, help_text='Kaplama tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oyun_alanlar', to='parkbahce.kaplamatip', verbose_name='Kaplama Tipi')),
                ('park', models.ForeignKey(help_text='Oyun alanının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='oyun_alanlar', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Oyun Alanı',
                'verbose_name_plural': 'Oyun Alanları',
                'db_table': '"parkbahce"."oyun_alanlar"',
            },
        ),
        migrations.CreateModel(
            name='KanalHat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('boru_cap', models.FloatField(blank=True, help_text='Boru çapını giriniz.', null=True, verbose_name='Boru Çapı')),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(help_text='Kanal hattı sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('uzunluk', models.FloatField(blank=True, default=0, help_text='Kanal hattının uzunluğunu giriniz.', null=True, verbose_name='Uzunluk')),
                ('extra_data', models.JSONField(blank=True, help_text='Kanal hattı ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('kanal_boru_tipi', models.ForeignKey(blank=True, help_text='Boru tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='kanal_hatlari', to='parkbahce.kanalborutip', verbose_name='Boru Tipi')),
                ('park', models.ForeignKey(help_text='Kanal hattının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='kanal_hatlari', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Kanal Hattı',
                'verbose_name_plural': 'Kanal Hatları',
                'db_table': '"parkbahce"."kanal_hatlari"',
            },
        ),
        migrations.CreateModel(
            name='Habitat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ad', models.CharField(blank=True, help_text='Habitatın adını giriniz.', max_length=50, null=True, verbose_name='Habitat Adı')),
                ('dikim_tarihi', models.DateField(blank=True, help_text='Habitatın dikim tarihini giriniz.', null=True, verbose_name='Dikim Tarihi')),
                ('firma', models.CharField(blank=True, help_text='Habitatın satın alındığı firmanın adını giriniz.', max_length=100, null=True, verbose_name='Firma')),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Habitat noktasını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('extra_data', models.JSONField(blank=True, help_text='Habitat ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('habitat_tipi', models.ForeignKey(blank=True, help_text='Habitat tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='habitatlar', to='parkbahce.habitattip', verbose_name='Habitat Tipi')),
                ('park', models.ForeignKey(help_text='Habitatın bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='habitatlar', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Habitat',
                'verbose_name_plural': 'Habitatlar',
                'db_table': '"parkbahce"."habitatlar"',
            },
        ),
        migrations.CreateModel(
            name='ElektrikHat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('boru_cap', models.FloatField(blank=True, help_text='Boru çapını giriniz.', null=True, verbose_name='Boru Çapı')),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(help_text='Elektrik hattı sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('gerilim', models.FloatField(blank=True, help_text='Elektrik hattının gerilimini giriniz.', null=True, verbose_name='Gerilim')),
                ('uzunluk', models.FloatField(blank=True, default=0, help_text='Elektrik hattının uzunluğunu giriniz.', null=True, verbose_name='Uzunluk')),
                ('extra_data', models.JSONField(blank=True, help_text='Elektrik hattı ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('elektrik_hat_tipi', models.ForeignKey(blank=True, help_text='Hat tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='elektrik_hatlari', to='parkbahce.elektrikhattip', verbose_name='Hat Tipi')),
                ('elektrik_kablo_tipi', models.ForeignKey(blank=True, help_text='Kablo tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='elektrik_hatlari', to='parkbahce.elektrikkablotip', verbose_name='Kablo Tipi')),
                ('park', models.ForeignKey(help_text='Elektrik hattının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='elektrik_hatlari', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Elektrik Hattı',
                'verbose_name_plural': 'Elektrik Hatları',
                'db_table': '"parkbahce"."elektrik_hatlari"',
            },
        ),
        migrations.CreateModel(
            name='ParkAbone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('abone_tipi', models.CharField(choices=[('elektrik', 'Elektrik'), ('su', 'Su'), ('dogalgaz', 'Doğalgaz'), ('telefon', 'Telefon'), ('internet', 'İnternet'), ('kablovt', 'Kablovt')], help_text='Abone tipi seçiniz.', max_length=50, verbose_name='Abone Tipi')),
                ('abone_no', models.CharField(help_text='Abone numarasını giriniz.', max_length=50, verbose_name='Abone No')),
                ('abone_tarihi', models.DateField(blank=True, help_text='Abone tarihini giriniz.', null=True, verbose_name='Abone Tarihi')),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Abone noktasını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('extra_data', models.JSONField(blank=True, help_text='Abone ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park', models.ForeignKey(help_text='Abone olduğu parkı seçiniz.', on_delete=django.db.models.deletion.CASCADE, related_name='aboneler', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Park Abone',
                'verbose_name_plural': 'Park Aboneleri',
                'db_table': '"parkbahce"."park_aboneleri"',
            },
        ),
        migrations.CreateModel(
            name='AboneEndeks',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endeks_tarihi', models.DateField(blank=True, help_text='Endeks tarihini giriniz.', null=True, verbose_name='Endeks Tarihi')),
                ('endeks_degeri', models.FloatField(blank=True, help_text='Endeks değerini giriniz.', null=True, verbose_name='Endeks Değeri')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park_abone', models.ForeignKey(help_text='Abone olduğu parkı seçiniz.', on_delete=django.db.models.deletion.CASCADE, related_name='endeksler', to='parkbahce.parkabone', verbose_name='Park Abone')),
            ],
            options={
                'verbose_name': 'Abone Endeks',
                'verbose_name_plural': 'Abone Endeksleri',
                'db_table': '"parkbahce"."abone_endeksleri"',
            },
        ),
        migrations.CreateModel(
            name='ParkBina',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ad', models.CharField(help_text='Bina adını giriniz.', max_length=50, verbose_name='Bina Adı')),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='Bina sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('alan', models.FloatField(blank=True, default=0, help_text='Bina alanını giriniz.', null=True, verbose_name='Alan')),
                ('cevre', models.FloatField(blank=True, default=0, help_text='Bina çevresini giriniz.', null=True, verbose_name='Çevre')),
                ('extra_data', models.JSONField(blank=True, help_text='Bina ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park', models.ForeignKey(help_text="Bina'nın bulunduğu park.", on_delete=django.db.models.deletion.CASCADE, related_name='binalar', to='parkbahce.park', verbose_name='Park')),
                ('bina_kullanim_tipi', models.ForeignKey(blank=True, help_text='Bina kullanım tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='binalar', to='parkbahce.parkbinakullanimtip', verbose_name='Bina Kullanım Tipi')),
            ],
            options={
                'verbose_name': 'Bina',
                'verbose_name_plural': 'Binalar',
                'db_table': '"parkbahce"."binalar"',
            },
        ),
        migrations.CreateModel(
            name='ParkDonati',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Donatı noktasını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('extra_data', models.JSONField(blank=True, help_text='Donatı ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('donati_tipi', models.ForeignKey(blank=True, help_text='Donatı tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='donatilar', to='parkbahce.donatitip', verbose_name='Donatı Tipi')),
                ('park', models.ForeignKey(help_text='Donatının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='donatilar', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Donatı',
                'verbose_name_plural': 'Donatılar',
                'db_table': '"parkbahce"."donatilar"',
            },
        ),
        migrations.CreateModel(
            name='ParkOyunGrup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('ad', models.CharField(blank=True, help_text='Oyun grubunun adını giriniz.', max_length=50, null=True, verbose_name='Oyun Grubu Adı')),
                ('sayi', models.IntegerField(blank=True, help_text='Oyun grubunun sayısını giriniz.', null=True, verbose_name='Oyun Grubu Sayısı')),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Oyun grubu noktasını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('extra_data', models.JSONField(blank=True, help_text='Oyun grubu ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('oyun_grup_tipi', models.ForeignKey(blank=True, help_text='Oyun grubu tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='oyun_gruplari', to='parkbahce.oyungruptip', verbose_name='Oyun Grubu Tipi')),
                ('park', models.ForeignKey(help_text='Oyun grubunun bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='oyun_gruplari', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Oyun Grubu',
                'verbose_name_plural': 'Oyun Grupları',
                'db_table': '"parkbahce"."oyun_gruplari"',
            },
        ),
        migrations.CreateModel(
            name='SporAlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='Spor alanı sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('alan', models.FloatField(blank=True, default=0, help_text='Spor alanı alanını giriniz.', null=True, verbose_name='Alan')),
                ('cevre', models.FloatField(blank=True, default=0, help_text='Spor alanı çevresini giriniz.', null=True, verbose_name='Çevre')),
                ('extra_data', models.JSONField(blank=True, help_text='Spor alanı ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park', models.ForeignKey(help_text='Spor alanının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='spor_alanlar', to='parkbahce.park', verbose_name='Park')),
                ('spor_alan_kaplama_tipi', models.ForeignKey(blank=True, help_text='Kaplama tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spor_alanlar', to='parkbahce.kaplamatip', verbose_name='Kaplama Tipi')),
                ('spor_alan_tipi', models.ForeignKey(blank=True, help_text='Spor alanı tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='spor_alanlar', to='parkbahce.sporalantip', verbose_name='Spor Alanı Tipi')),
            ],
            options={
                'verbose_name': 'Spor Alanı',
                'verbose_name_plural': 'Spor Alanları',
                'db_table': '"parkbahce"."spor_alanlar"',
            },
        ),
        migrations.CreateModel(
            name='SulamaHat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('boru_cap', models.FloatField(blank=True, help_text='Boru çapını giriniz.', null=True, verbose_name='Boru Çapı')),
                ('geom', django.contrib.gis.db.models.fields.LineStringField(help_text='Sulama hattı sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('uzunluk', models.FloatField(blank=True, default=0, help_text='Sulama hattının uzunluğunu giriniz.', null=True, verbose_name='Uzunluk')),
                ('extra_data', models.JSONField(blank=True, help_text='Sulama hattı ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park', models.ForeignKey(help_text='Sulama hattının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='sulama_hatlari', to='parkbahce.park', verbose_name='Park')),
                ('sulama_boru_tipi', models.ForeignKey(blank=True, help_text='Boru tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sulama_hatlari', to='parkbahce.sulamaborutip', verbose_name='Boru Tipi')),
            ],
            options={
                'verbose_name': 'Sulama Hattı',
                'verbose_name_plural': 'Sulama Hatları',
                'db_table': '"parkbahce"."sulama_hatlari"',
            },
        ),
        migrations.CreateModel(
            name='SulamaNokta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(help_text='Sulama noktasını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('extra_data', models.JSONField(blank=True, help_text='Sulama noktası ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park', models.ForeignKey(help_text='Sulama noktasının bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='sulama_noktalari', to='parkbahce.park', verbose_name='Park')),
                ('sulama_nokta_tipi', models.ForeignKey(blank=True, help_text='Sulama noktası tipi seçiniz.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sulama_noktalari', to='parkbahce.sulamanoktatip', verbose_name='Sulama Noktası Tipi')),
            ],
            options={
                'verbose_name': 'Sulama Noktası',
                'verbose_name_plural': 'Sulama Noktaları',
                'db_table': '"parkbahce"."sulama_noktasi"',
            },
        ),
        migrations.CreateModel(
            name='YesilAlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('geom', django.contrib.gis.db.models.fields.MultiPolygonField(help_text='Yeşil alan sınırlarını belirten geometri alanı.', srid=5256, verbose_name='Geometri')),
                ('alan', models.FloatField(blank=True, default=0, help_text='Yeşil alan alanını giriniz.', null=True, verbose_name='Alan')),
                ('cevre', models.FloatField(blank=True, default=0, help_text='Yeşil alan çevresini giriniz.', null=True, verbose_name='Çevre')),
                ('extra_data', models.JSONField(blank=True, help_text='Yeşil alan ile ilgili ekstra verileri JSON formatında giriniz.', null=True, verbose_name='Ekstra Veri')),
                ('osm_id', models.CharField(help_text="OpenStreetMap'den alınan benzersiz kimlik.", max_length=50, unique=True, verbose_name='OSM ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, null=True, verbose_name='Güncellenme Tarihi')),
                ('park', models.ForeignKey(help_text='Yeşil alanın bulunduğu park.', on_delete=django.db.models.deletion.CASCADE, related_name='yesil_alanlar', to='parkbahce.park', verbose_name='Park')),
            ],
            options={
                'verbose_name': 'Yeşil Alan',
                'verbose_name_plural': 'Yeşil Alanlar',
                'db_table': '"parkbahce"."yesil_alanlar"',
            },
        ),
    ]
